{"version":3,"sources":["app/application.js","app/collections/plugs.js","app/initialize.js","app/models/device.js","app/models/plug.js","app/router.coffee","app/templates/home.jade","app/views/app_view.coffee","app/views/contact-list.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7EA;AAAA;;ACAA;;AAAA,UAAiB,QAAQ,gBAAR,CAAjB;;AAAA,cACA,GAAiB,QAAQ,mBAAR,CADjB;;AAAA,WAEA,GAAiB,QAAQ,eAAR,CAFjB;;AAAA,SAGA,GAAiB,QAAQ,aAAR,CAHjB;;AAAA,KAIA,GAAiB,kBAJjB;;AAAA,MAKA,GAAiB,eALjB;;AAAA,IAMA,GAAiB,aANjB;;AAAA,MASM,CAAC,OAAP,GAAiB,SAAS,QAAQ,CAAC,MAAM,CAAC,MAAhB,CAEtB;AAAA,UACI;AAAA,QAAW,MAAX;AAAA,IACA,UAAW,YADX;GADJ;AAAA,EAIA,MAAM;AACF;AAAA,eAAe,YAAQ;AAAA,aAAO,IAAP;KAAR,CAAf;AAAA,IACA,QAAQ,CAAC,MAAT,EADA,CADE;EAAA,CAJN;AAAA,EASA,YAAY,aATZ;CAFsB,CAT1B;;;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","file":"public/scripts/app.js","sourcesContent":["module.exports = {\n\n    initialize: function() {\n        var Router = require('router');\n        this.router = new Router();\n        Backbone.history.start();\n    }\n};","Plug = require('../models/plug');\nmodule.exports = Plugs = Backbone.Collection.extend({\n    model: Plug,\n    url: 'insert',\n});","// The function called from index.html\n$(document).ready(function() {\n    var app = require('application');\n    app.initialize()\n});\n","module.exports = Device = Backbone.Model.extend({\n\turl: '',\n\tdefaults: {\n\t\tpassword: null,\n\t\ttarget: null,\n\t\tdevicename: null, \n\t\tstatus: null\n\t}\n});","module.exports = Plug = Backbone.Model.extend({\n\turlRoot: 'plug',\n\tdefaults: {\n\t\tnDocs: null,\n\t\tstatus: null,\n        devicename: null,\n        target: null,\n        password: null,\n        dataType: null\n\t}, \n\n\n\treplicate: function(callback) {\n\t\t$.ajax({\n\t        url: 'plug/replicate/true',\n\t        type: 'POST',\n\t        data: {\n\t        \tdataType: this.get('dataType')\n\t        },\n\t        success:function(result){\n\t        \tcallback(\"Sharing ok !\");\n\t        },\n\t        error: function(result, response) {\n\t        \tcallback(\"Replication failed !\");\n\t        }\n\t    });\n\t},\n\n\tcancelReplications: function(callback) {\n\t\t$.ajax({\n\t        url: 'plug/replicate/false',\n\t        type: 'POST',\n\t        success:function(result){\n\t        \tcallback(\"Cancel replication successful !\");\n\t        },\n\t        error: function(result, response) {\n\t        \tcallback(\"Cancel failed !\");\n\t        }\n\t    });\n\t},\n\n\tregister: function(callback) {\n\t\t$.ajax({\n\t        url: 'plug/register/true',\n\t        type: 'POST',\n\t        data: {\n\t        \ttarget: this.get('target')\n\t        },\n\t        success:function(result){\n\t        \tcallback(\"Ready to share !\");\n\t        },\n\t        error: function(result, response) {\n\t        \tcallback(\"Not ready :/\");\n\t        }\n\t    });\n\t},\n\n\n\tgenerate: function(callback) {\n\t\t_this = this;\n\t\t$.ajax({\n\t        url: 'plug/insert',\n\t        type: 'POST',\n\t        data: {\n\t        \tnDocs: this.get('nDocs')\n\t        },\n\t        success:function(result){\n\t        \tcallback(\"Insert \" + _this.get('nDocs') + \" docs ok !\");\n\t        },\n\t        error: function(result, response) {\n\t        \tcallback(\"Insertion failed !\");\n\t        }\n\t    });\n\t},\n\n\n});\n","AppView        = require('views/app_view')\nPlugCollection = require('collections/plugs')\nDeviceModel    = require('models/device')\nPlugModel      = require('models/plug')\nplugs          = new PlugCollection\ndevice         = new DeviceModel\nplug           = new PlugModel\n\n\nmodule.exports = Router = Backbone.Router.extend(\n\n    routes:\n        ''       : 'main'\n        'insert' : 'insertPlug'\n\n    main: ()->\n        mainView = new AppView(model: plug)\n        mainView.render()\n        return\n\n    insertPlug: ()->\n        # alert('toto')\n        return\n\n)","module.exports = function anonymous(locals, attrs, escape, rethrow, merge) {\nattrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\nvar buf = [];\nwith (locals || {}) {\nvar interp;\nbuf.push('<h1>Sharing app</h1><p>Status :<strong id=\"status\">' + escape((interp = status) == null ? '' : interp) + '</strong></p><hr/><br/><form><label>Target URL :</label><input type=\"text\" name=\"targetURL\"/><!--label Device name :--><!--input(type=\"text\", name=\"devicename\", size=10)--><!--label Password :--><!--input(type=\"password\", name=\"pwd\", size=10)--><input id=\"registerDevice\" type=\"submit\" value=\"Register\"/><!--input(id=\"unregisterDevice\", type=\"submit\", value=\"Unregister\")--></form><br/><br/><form><label>Generate n Contacts :</label><input type=\"text\" name=\"nDocs\" size=\"1\"/><input id=\"insertDocs\" type=\"image\" src=\"./images/generate.png\" alt=\"submit\" height=\"50\" width=\"50\"/><!--input(id=\"insertDocs\", type=\"submit\", value=\"Generate\")--><!--img(src=\"./images/generate.png\", height=\"50\", width=\"50\")--></form><div id=\"myList\"></div><p>Share all my contacts !<a href=\"\"><img id=\"replicateContacts\" data-datatype=\"contact\" src=\"./images/share.jpg\" height=\"60\" width=\"60\"/></a></p><p>Share all my photos !<a href=\"\"><img id=\"replicatePhotos\" data-datatype=\"album\" src=\"./images/share.jpg\" height=\"60\" width=\"60\"/></a></p><br/><br/><!--p Extra :--><!--form--><!--\tlabel Target URL :--><!--\tinput(type=\"text\", name=\"targetURL\", size=10)--><!--\tinput(id=\"registerDevice\", type=\"submit\", value=\"Unregister device\")--><!----><p>Cancel all current replications :<a href=\"\"><img id=\"cancel\" src=\"./images/cancel.png\" height=\"50\" width=\"50\"/></a></p><ul></ul><li><a href=\"https://github.com/Gara64/cozy-plugdb\">Github</a></li>');\n}\nreturn buf.join(\"\");\n};","Plug = require('../models/plug')\n\n#var Device = require('../models/device');\nmodule.exports = AppView = Backbone.View.extend(\n    el: 'body'\n    template: require('../templates/home')\n    events:\n        'click #registerDevice'    : 'registerDevice'\n        'click #insertDocs'        : 'createDocs'\n        'click #replicateContacts' : 'replicate'\n        'click #replicatePhotos'   : 'replicate'\n        'click #cancel'            : 'cancelReplications'\n\n    render: ->\n        model = @model\n        @$el.html @template(status: model.get('status'))\n\n        myCollection = new ContactCollection()\n        myCollection.fetch(reset:true)\n\n        realtimer = new ContactListener()\n        realtimer.watch myCollection\n\n        # en supposant qu'il y ait un element d'id myList dans le html\n\n        view = new ContactListView\n           el         : '#myList'\n           collection : myCollection\n\n        this\n\n    updateStatus: ->\n        #this.$el.find('')\n        return\n\n    replicate: (event) ->\n        event.preventDefault()\n        plug = @model\n        dataType = $(event.currentTarget).data('datatype')\n        plug.set dataType: dataType\n        plug.replicate (res) ->\n            plug.set status: res\n            return\n        return\n\n    cancelReplications: (event) ->\n        event.preventDefault()\n        plug = @model\n        plug.cancelReplications (res) ->\n            plug.set status: res\n            return\n        return\n\n    registerDevice: (event) ->\n        event.preventDefault()\n        plug = @model\n        plug.set target: @$el.find('input[name=\"targetURL\"]').val()\n        plug.register (res) ->\n            plug.set status: res\n            return\n        return\n\n    createDocs: (event) ->\n        event.preventDefault()\n        plug = @model\n        plug.set nDocs: @$el.find('input[name=\"nDocs\"]').val()\n        plug.generate (res) ->\n            plug.set status: res\n            return\n        return\n\n    # initialize is automatically called once after the view is constructed\n    initialize: ->\n        #this.listenTo(this.collection, \"insert\", this.onInsertPlug);\n        @model.on 'change:status', @render, this\n        return\n\n    onInsertPlug: (model) ->\n        # re-render the view\n        @render()\n        return\n)\n\n\n\nclass Contact extends Backbone.Model\n\n\nclass ContactCollection extends Backbone.Collection\n    model : Contact\n    url   : 'contacts'\n\n\nclass ContactListener extends CozySocketListener\n    models:\n        'contact': Contact\n    events: [\n        'contact.create'\n        'contact.update'\n        'contact.delete'\n    ]\n    onRemoteCreate: (model) ->\n        @collection.add model\n    onRemoteDelete: (model) ->\n        @collection.remove model\n\n\nclass ContactListView extends Backbone.View\n\n    events :\n        \"change\" : \"onChange\"\n\n    onChange : (e) ->\n        console.log e.target\n        e.preventDefault()\n        model = @collection.get(e.target.id)\n        model.save({shared : !model.get('shared')}, {wait:true})\n\n\n    initialize: ->\n        @listenTo @collection, 'change', @render\n        @listenTo @collection, 'add'   , @render\n        @listenTo @collection, 'remove', @render\n        @listenTo @collection, 'reset' , @render\n\n    renderOne: (model) =>\n        console.log  model.get('shared')\n        checked = if model.get('shared') then \"checked='checked'\" else ''\n        \"\"\"\n            <tr>\n                <td>#{model.get('id')}</td>\n                <td>#{model.get('fn')}</td>\n                <td><input type=\"checkbox\" id=\"#{model.get('id')}\" #{checked}></td>\n            </tr>\n        \"\"\"\n\n    render: =>\n        html =\n        \"\"\"\n            <table>\n            <tr>\n                <td>ID</td>\n                <td>First Name</td>\n                <td>Shared</td>\n            </tr>\n        \"\"\"\n        @collection.forEach (model) =>\n            html += @renderOne model\n\n        html += '</table>'\n        @$el.html(html)\n\n\n\n\n\n\n\n# /*\n#         event.preventDefault();\n#         var model = this.model;\n#         model.urlRoot = 'plug/replicate/true';\n#         model.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Sharing ok !\"});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n#     },\n\n#     cancelReplications: function(event) {\n#         event.preventDefault();\n#         var model = this.model;\n#         model.urlRoot = 'plug/replicate/false';\n#         model.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Cancel replications ok\"});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n#     },\n\n#     registerDevice: function(event) {\n#         event.preventDefault();\n#         _this = this;\n#         var plug = new Plug({\n#             target: this.$el.find('input[name=\"targetURL\"]').val(),\n#             password: this.$el.find('input[name=\"pwd\"]').val(),\n#             devicename: this.$el.find('input[name=\"devicename\"]').val()\n#         })\n#         plug.urlRoot = 'plug/register/true';\n#         plug.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Device correctly registered\"});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n\n#     },\n\n#     unregisterDevice: function(event) {\n#         event.preventDefault();\n#         _this = this;\n#         var plug = new Plug({\n#             target: this.$el.find('input[name=\"targetURL\"]').val(),\n#             password: this.$el.find('input[name=\"pwd\"]').val(),\n#             devicename: this.$el.find('input[name=\"devicename\"]').val()\n#         })\n#         plug.urlRoot = 'plug/register/false';\n#         plug.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Device correctly unregistered\"});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n#     },\n\n#     createDocs: function(event) {\n#         // submit button reload the page, we don't want that\n#        event.preventDefault();\n#        _this = this;\n#         // create a new model\n#         var plug = this.model;\n#         plug.set({nDocs: this.$el.find('input[name=\"nDocs\"]').val()});\n#         plug.urlRoot = 'plug/insert';\n\n#         // add it to the collection\n#        //his.collection.add(plug);\n\n#         plug.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Insert \" + plug.get('nDocs') + ' docs ok !'});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n#     },\n# */\n",""]}