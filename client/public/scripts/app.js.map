{"version":3,"sources":["app/application.js","app/collections/plugs.js","app/initialize.js","app/models/device.js","app/models/plug.js","app/router.coffee","app/templates/home.jade","app/views/app_view.coffee","app/views/contact-list.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"public/scripts/app.js","sourcesContent":["module.exports = {\n\n    initialize: function() {\n        var Router = require('router');\n        this.router = new Router();\n        Backbone.history.start();\n    }\n};","Plug = require('../models/plug');\nmodule.exports = Plugs = Backbone.Collection.extend({\n    model: Plug,\n    url: 'insert',\n});","// The function called from index.html\n$(document).ready(function() {\n    var app = require('application');\n    app.initialize()\n});\n","module.exports = Device = Backbone.Model.extend({\n\turl: '',\n\tdefaults: {\n\t\tpassword: null,\n\t\ttarget: null,\n\t\tdevicename: null, \n\t\tstatus: null\n\t}\n});","module.exports = Plug = Backbone.Model.extend({\n    urlRoot: 'plug',\n    defaults: {\n        nDocs: null,\n        baseName:null,\n        status: null,\n        devicename: null,\n        target: null,\n        password: null,\n        dataType: null, \n        auth: false, \n        init: false,\n        ids: null\n    },\n\n    replicate: function(callback) {\n        $.ajax({\n            url: 'plug/replicate/true',\n            type: 'POST',\n            data: {\n                dataType: this.get('dataType'),\n                target: this.get('target')\n            },\n            success:function(result){\n                callback(\"Sharing ok !\");\n            },\n            error: function(result, response) {\n                callback(\"Replication failed !\");\n            }\n        });\n    },\n\n    cancelReplications: function(callback) {\n        $.ajax({\n            url: 'plug/replicate/false',\n            type: 'POST',\n            success:function(result){\n                callback(\"Cancel replication successful !\");\n            },\n            error: function(result, response) {\n                callback(\"Cancel failed !\");\n            }\n        });\n    },\n\n    register: function(callback) {\n        $.ajax({\n            url: 'plug/register/true',\n            type: 'POST',\n            data: {\n                target: this.get('target')\n            },\n            success:function(result){\n                callback(\"Ready to share !\");\n            },\n            error: function(result, response) {\n                callback(\"Not ready :/\");\n            }\n        });\n    },\n\n\n    generate: function(callback) {\n        _this = this;\n        $.ajax({\n            url: 'plug/generate',\n            type: 'POST',\n            data: {\n                nDocs: this.get('nDocs'),\n                baseName: this.get('baseName')\n            },\n            success:function(result){\n                callback(result);\n            },\n            error: function(result, response) {\n                var txt = JSON.parse(result.responseText);\n                callback(txt.error, false);\n            }\n        });\n    },\n\n    init: function(callback) {\n        $.ajax({\n            url: 'plug/init',\n            type: 'POST',\n            success:function(result){\n                callback(result, true);\n            },\n            error: function(result, response) {\n                var txt = JSON.parse(result.responseText);\n                callback(txt.error, false);\n            }\n        });\n    },\n\n    close: function(callback) {\n        $.ajax({\n            url: 'plug/close',\n            type: 'POST',\n            success:function(result){\n                callback(result, true);\n            },\n            error: function(result, response) {\n                var txt = JSON.parse(result.responseText);\n                callback(txt.error, false);\n            }\n        });\n    },\n\n    reset: function(callback) {\n        $.ajax({\n            url: 'plug/reset',\n            type: 'POST',\n            success:function(result){\n                callback(result, true);\n            },\n            error: function(result, response) {\n                var txt = JSON.parse(result.responseText);\n                callback(txt.error, false);\n            }\n        });\n    },\n\n    authenticateFP: function(callback) {\n        _this = this;\n        $.ajax({\n            url: 'plug/authFP', \n            type: 'POST',\n            success: function(result){\n                callback(result, true);\n            },\n            error: function(result, response) {\n                var txt = JSON.parse(result.responseText);\n                callback(txt.error, false);\n            }\n        });\n    },\n\n    select: function(callback) {\n        _this = this;\n        $.ajax({\n            url: 'plug/select', \n            type: 'GET',\n            success: function(result){\n                callback(result);\n            },\n            error: function(result, response) {\n                var txt = JSON.parse(result.responseText);\n                callback(txt.error);\n            }\n        });\n    }, \n\n    insert: function(callback) {\n        _this = this;\n        $.ajax({\n            url: 'plug/insert', \n            type: 'POST',\n            data: {\n                baseName: this.get('baseName')\n            },\n            success: function(result){\n                callback(result);\n            },\n            error: function(result, response) {\n                var txt = JSON.parse(result.responseText);\n                callback(txt.error);\n            }\n        });\n    }, \n\n    status: function(callback) {\n        _this = this;\n        $.ajax({\n            url: 'plug/status', \n            type: 'GET',\n            success: function(result){\n                callback(result);\n            },\n            error: function(result, response) {\n                var txt = JSON.parse(result.responseText);\n                callback(txt.error);\n            }\n        });\n    }\n\n\n});\n","AppView        = require('views/app_view')\nPlugCollection = require('collections/plugs')\nDeviceModel    = require('models/device')\nPlugModel      = require('models/plug')\nplugs          = new PlugCollection\ndevice         = new DeviceModel\nplug           = new PlugModel\n\n\nmodule.exports = Router = Backbone.Router.extend(\n\n    routes:\n        ''       : 'main'\n        'insert' : 'insertPlug'\n\n    main: ()->\n        mainView = new AppView(model: plug)\n        mainView.render()\n        return\n\n    insertPlug: ()->\n        # alert('toto')\n        return\n\n)","module.exports = function anonymous(locals, attrs, escape, rethrow, merge) {\nattrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\nvar buf = [];\nwith (locals || {}) {\nvar interp;\nbuf.push('<h1>Sharing control panel</h1><p>of my personal decentralized service system</p><p>Status :<strong id=\"status\">' + escape((interp = status) == null ? '' : interp) + '</strong></p><hr/><br/><div id=\"plugBlock\"><img id=\"imgplugdb\" src=\"./images/plugdb.png\" class=\"superpose\"/><img id=\"imglock\" src=\"./images/lock.png\" height=\"50\" width=\"50\" class=\"superpose\"/><br/><a href=\"\"><input type=\"button\" id=\"init\" value=\"Init\"/><input type=\"button\" id=\"close\" value=\"Close\"/><input type=\"button\" id=\"reset\" value=\"Reset\"/></a></div><div id=\"sharingBlock\"><p class=\"formRow\">1/ Authenticate on your PlugDB&nbsp;<a href=\"\"><img id=\"authenticate\" src=\"./images/authenticate.png\" height=\"30\" width=\"30\"/></a><!--label Device name :--><!--input(type=\"text\", name=\"devicename\", size=10)--><!--label Password :--><!--input(type=\"password\", name=\"pwd\", size=10)--></p><!--span Show contacts--><!--input#show-list(type=\\'checkbox\\')--><p>2/ Select shared contact</p><div id=\"myList\"></div><br/><form><label>3/ Share my contacts with (URL) :</label><input id=\"targetURL\" type=\"text\" name=\"targetURL\"/></form><p class=\"formRow\">4/ Start sharing&nbsp;<a href=\"\"><img id=\"replicateContacts\" data-datatype=\"contact\" src=\"./images/share.jpg\" height=\"30\" width=\"30\"/></a></p></div><hr/><br/><span>More tools</span><input id=\"toggle-more-tools\" type=\"checkbox\"/><!-- , checked=\\'checked\\'--><br/><br/><div id=\"more-tools\"><form class=\"formRow\"><label>Reset contacts & create&nbsp;</label><input type=\"text\" name=\"nDocs\" size=\"1\" value=\"4\"/><span>&nbsp;new ones called&nbsp;</span><input type=\"text\" name=\"baseName\" size=\"5\" value=\"Alice\"/><span>&nbsp;</span><input id=\"insertDocs\" type=\"image\" src=\"./images/generate.png\" alt=\"submit\" height=\"25\" width=\"25\"/><!--input(id=\"insertDocs\", type=\"submit\", value=\"Generate\")--><!--img(src=\"./images/generate.png\", height=\"50\", width=\"50\")--></form><br/><form class=\"formRow\"><label>Add 1 contact named </label><input type=\"text\" name=\"singleBaseName\" size=\"5\" value=\"Alice\"/><span>&nbsp;</span><input id=\"insertSingleDoc\" type=\"image\" src=\"./images/add.png\" alt=\"submit\" height=\"25\" width=\"25\"/></form><p class=\"formRow\">Cancel all current replications :<a href=\"\"><img id=\"cancel\" src=\"./images/cancel.png\" height=\"25\" width=\"25\"/></a></p><!--p Extra :--><!--form--><!--\tlabel Target URL :--><!--\tinput(type=\"text\", name=\"targetURL\", size=10)--><!--\tinput(id=\"registerDevice\", type=\"submit\", value=\"Unregister device\")--><!----></div><!--p Share the selected contacts : --><!--\ta(href=\"\" )--><!--\t\timg(id=\"replicateContacts\", data-datatype=\"contact\", src=\"./images/share.jpg\", height=\"60\", width=\"60\")--><!--p Share all my photos !--><!--\ta(href=\"\" )--><!--\t\timg(id=\"replicatePhotos\", data-datatype=\"album\", src=\"./images/share.jpg\", height=\"60\", width=\"60\")<ul></ul><li><a href=\"https://github.com/Gara64/cozy-plugdb\">Github</a></li>-->');\n}\nreturn buf.join(\"\");\n};","Plug = require('../models/plug')\n\n#var Device = require('../models/device');\nmodule.exports = AppView = Backbone.View.extend(\n    el: 'body'\n    template: require('../templates/home')\n    events:\n        'click #registerDevice'    : 'registerDevice'\n        'click #insertDocs'        : 'createDocs'\n        'click #replicateContacts' : 'replicate'\n        'click #replicatePhotos'   : 'replicate'\n        'click #cancel'            : 'cancelReplications'\n        'click #authenticate'      : 'authenticateFP'\n        'click #init'              : 'initPlug'\n        'click #close'             : 'closePlug'\n        'click #reset'             : 'resetPlug'\n        'click #insertSingleDoc'   : 'insertSingleDoc'\n\n\n\n\n    render: ->\n        model = @model\n        \n        # render the template\n        @$el.html @template()\n       \n        @renderStatus()\n        @renderPlug()\n\n        myCollection = new ContactCollection()\n        myCollection.fetch(reset:true)\n\n        realtimer = new ContactListener()\n        realtimer.watch myCollection\n\n        # en supposant qu'il y ait un element d'id myList dans le html\n        view = new ContactListView\n           el         : '#myList'\n           collection : myCollection\n\n        this\n\n    renderStatus: ->\n        model = @model\n        @$el.html @template(status: model.get('status')) \n\n\n    renderPlug: ->\n        model = @model\n        isInit = model.get('init')\n        console.log 'is init : ' + isInit\n        $('#plugBlock').css('border-color', if isInit then 'green' else 'red')\n\n        isAuth = model.get('auth')\n        if(isAuth)\n            $('#myList').css('display', 'block')\n            @render\n        else\n            $('#myList').css('display', 'none')\n        \n        this\n\n    updateStatus: ->\n        #this.$el.find('')\n        return\n\n    getPlugStatus: (callback) ->\n        plug = @model\n        plug.status (res) ->\n            console.log 'init : ' + res.init\n            console.log 'auth : ' + res.auth\n            plug.set init: res.init\n            plug.set auth: res.auth\n            callback\n        return\n\n    replicate: (event) ->\n        event.preventDefault()\n        plug = @model\n        dataType = $(event.currentTarget).data('datatype')\n        target = @$el.find('input[name=\"targetURL\"]').val()\n        if target is ''\n            alert 'Please type the target URL'\n            return\n        if not plug.get 'auth'\n            alert 'Please authenticate first'\n            return\n        \n        plug.set dataType: dataType\n        plug.set target: target\n        plug.replicate (res) ->\n            plug.set status: res\n            return\n        return\n\n    cancelReplications: (event) ->\n        event.preventDefault()\n        plug = @model\n        plug.cancelReplications (res) ->\n            plug.set status: res\n            return\n        return\n\n    registerDevice: (event) ->\n        event.preventDefault()\n        plug = @model\n        plug.set target: @$el.find('input[name=\"targetURL\"]').val()\n        plug.register (res) ->\n            plug.set status: res\n            return\n        return\n\n    createDocs: (event) ->\n        event.preventDefault()\n        plug = @model\n        plug.set nDocs   : @$el.find('input[name=\"nDocs\"]').val()\n        plug.set baseName: @$el.find('input[name=\"baseName\"]').val()\n        plug.set status: 'Generation of the documents...'\n        plug.generate (res) ->\n            plug.set status: res\n            return\n        return\n\n    initPlug: (event) ->\n        event.preventDefault()\n        plug = @model\n        plug.set status: 'Initialization...'\n        plug.init (res, init) ->\n            plug.set status: res\n            plug.set init: init\n            return\n        return\n\n    closePlug: (event) ->\n        event.preventDefault()\n        plug = @model\n        plug.set status: 'Shut down...'\n        plug.close (res, closed) ->\n            plug.set status: res\n            plug.set auth: !closed\n            plug.set init: !closed\n            return\n        return\n\n    resetPlug: (event) ->\n        event.preventDefault()\n        plug = @model\n        plug.set status: 'Restart plugDB...'\n        plug.reset (res, reset) ->\n            plug.set status: res\n            plug.set auth: !reset\n            plug.set init: reset\n            return\n        return\n\n    authenticateFP: (event) ->\n        event.preventDefault()\n        _this = this\n        plug = @model\n        plug.set status: 'Authentication...'\n        plug.authenticateFP (res, authenticated) ->\n            plug.set status: res\n            plug.set auth: authenticated\n            #check if the authentication failed but not the initialization\n            if(not authenticated)\n                _this.getPlugStatus()\n            else\n                plug.set init: true\n            return\n        return\n\n    insertSingleDoc: (event) ->\n        event.preventDefault()\n        _this = this\n        plug = @model\n        plug.set baseName: @$el.find('input[name=\"singleBaseName\"]').val()\n        plug.set status: 'Insertion of a new contact...'\n        plug.insert (res) ->\n            plug.set status: res\n            return\n        return\n\n\n    # initialize is automatically called once after the view is constructed\n    initialize: ->\n        _this = this\n        @getPlugStatus () ->\n            _this.renderPlug _this\n        #@renderPlug this\n        @model.on 'change:status', @render, this\n        @model.on 'change:auth', @render, this\n        @model.on 'change:init', @render, this\n        return\n\n    onInsertPlug: (model) ->\n        # re-render the view\n        @render()\n        return\n)\n\n\n\nclass Contact extends Backbone.Model\n\n\nclass ContactCollection extends Backbone.Collection\n    model : Contact\n    url   : 'contacts'\n\n\nclass ContactListener extends CozySocketListener\n    models:\n        'contact': Contact\n    events: [\n        'contact.create'\n        'contact.update'\n        'contact.delete'\n    ]\n    onRemoteCreate: (model) ->\n        @collection.add model\n    onRemoteDelete: (model) ->\n        @collection.remove model\n\n\nclass ContactListView extends Backbone.View\n\n    events :\n        \"change\" : \"onChange\"\n\n\n    onChange : (e) ->\n        console.log e.target\n        e.preventDefault()\n        if e.target.type == \"checkbox\"\n            model = @collection.get(e.target.id)\n            model.save({shared : !model.get('shared')}, {wait:true})\n        else\n            @handleInputChange(e.target)\n\n\n    handleInputChange : (elt)->\n        console.log \"handleInputChange !\"\n        parent = elt.parentElement.parentElement\n        firstName = parent.children[0].children[0].value\n        lastName  = parent.children[1].children[0].value\n        note      = parent.children[2].children[0].value\n        data =\n            n    : lastName + \";\" + firstName + \";;;\"\n            fn   : firstName + \" \" + lastName\n            note : note\n        model = @collection.get(parent.id)\n        model.save(data, {wait:true})\n\n\n    initialize: ->\n        @listenTo @collection, 'change', @render\n        @listenTo @collection, 'add'   , @render\n        @listenTo @collection, 'remove', @render\n        @listenTo @collection, 'reset' , @render\n        console.log @el\n        # @el.addEventListener('blur',@onBlur)\n\n    renderOne: (model) =>\n        #console.log  model.get('shared')\n        checked = if model.get('shared') then \"checked='checked'\" else ''\n        n = model.get('n')\n        if n\n            n = n.split(';')\n        else\n            n = [model.get('fn'),'']\n        #console.log n\n        id = model.get('id')\n        \"\"\"\n            <tr class='contac-row' id=#{id}>\n               <!-- <td role=\"id\">#{id}</td> -->\n                <td role=\"fn\"><input value=\"#{n[1]}\"></input></td>\n                <td role=\"ln\"><input value=\"#{n[0]}\"></input></td>\n                <td role=\"pn\"><input value=\"#{model.get('note')}\"></input></td>\n                <td><input type=\"checkbox\" id=\"#{id}\" #{checked}></td>\n            </tr>\n        \"\"\"\n\n    render: =>\n        html =\n        \"\"\"\n            <table>\n            <thead>\n            <tr class=\"titles\">\n               <!-- <td>ID</td> -->\n                <td role=\"ln\">Last name</td>\n                <td role=\"fn\">First name</td>\n                <td role=\"pn\">Note</td>\n                <td>Shared</td>\n            </tr>\n            </thead>\n        \"\"\"\n        @collection.forEach (model) =>\n            html += @renderOne model\n\n        html += '</table>'\n        @$el.html(html)\n\n\n\n\n\n\n\n# /*\n#         event.preventDefault();\n#         var model = this.model;\n#         model.urlRoot = 'plug/replicate/true';\n#         model.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Sharing ok !\"});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n#     },\n\n#     cancelReplications: function(event) {\n#         event.preventDefault();\n#         var model = this.model;\n#         model.urlRoot = 'plug/replicate/false';\n#         model.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Cancel replications ok\"});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n#     },\n\n#     registerDevice: function(event) {\n#         event.preventDefault();\n#         _this = this;\n#         var plug = new Plug({\n#             target: this.$el.find('input[name=\"targetURL\"]').val(),\n#             password: this.$el.find('input[name=\"pwd\"]').val(),\n#             devicename: this.$el.find('input[name=\"devicename\"]').val()\n#         })\n#         plug.urlRoot = 'plug/register/true';\n#         plug.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Device correctly registered\"});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n\n#     },\n\n#     unregisterDevice: function(event) {\n#         event.preventDefault();\n#         _this = this;\n#         var plug = new Plug({\n#             target: this.$el.find('input[name=\"targetURL\"]').val(),\n#             password: this.$el.find('input[name=\"pwd\"]').val(),\n#             devicename: this.$el.find('input[name=\"devicename\"]').val()\n#         })\n#         plug.urlRoot = 'plug/register/false';\n#         plug.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Device correctly unregistered\"});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n#     },\n\n#     createDocs: function(event) {\n#         // submit button reload the page, we don't want that\n#        event.preventDefault();\n#        _this = this;\n#         // create a new model\n#         var plug = this.model;\n#         plug.set({nDocs: this.$el.find('input[name=\"nDocs\"]').val()});\n#         plug.urlRoot = 'plug/insert';\n\n#         // add it to the collection\n#        //his.collection.add(plug);\n\n#         plug.save({}, {\n#             success: function(model, response) {\n#                 _this.model.set({status: \"Insert \" + plug.get('nDocs') + ' docs ok !'});\n#                 _this.render();\n#             },\n#             error: function(model, response) {\n#                 var rep = JSON.parse(response.responseText);\n#                 _this.model.set({status: rep.error});\n#                 _this.render();\n#             }\n#         });\n#     },\n# */\n",""]}